###-begin-gh-completion-###
# gh command completion script(custom) 
#
# "issue" と "pr" コマンドに対応.
# - "-l" | "--label" でリポジトリのラベル一覧を候補にする
# - "--add-label" でリポジトリのラベル一覧を候補にする
# - "--remove-label" で対象のラベル一覧を候補にする

# オリジナルの補完関数を展開する
eval "$(gh completion -s bash)"

__gh_label_completion_labels_get_repo_from_words() {
  local REPO=""
  if [ "${words[2]}" = "-R" ] || [ "${words[2]}" = "--repo" ] ; then
    local SAVE_IFS="${IFS}"
    IFS="/"
    local ELM
    read -r -a ELM <<< "${words[3]}"
    IFS="${SAVE_IFS}"
    if [ "${#ELM[@]}" -eq 2 ] ; then
      REPO="${ELM[0]}/${ELM[1]}" 
    elif [ "${#ELM[@]}" -eq 3 ] ; then
      REPO="${ELM[0]}/${ELM[1]}/${ELM[2]}" 
    fi
  fi
  echo -n "${REPO}"
}

__gh_label_completion_labels_from_repo() {
  local SAVE_IFS="${IFS}"
  local REPO_PATH="{owner}/{repo}"
  test -n "${1}" && REPO_PATH="${1}"
  mapfile -t COMPREPLY < <(IFS=$'\n'; compgen -W "$(gh api "repos/${REPO_PATH}/labels" --jq '.[].name')" -- "${cur}";IFS="${SAVE_IFS}")
}

__gh_label_completion_labels_from_target() {
  local SAVE_IFS="${IFS}"
  mapfile -t COMPREPLY < <(IFS=$'\n'; compgen -W "$(gh "${@}" --json labels --jq '.labels[].name')" -- "${cur}";IFS="${SAVE_IFS}")
}

__gh_label_completion() {
  # local cur prev words cword split
  local cur prev words
  _init_completion -s || return

  if [ "${words[1]}" = "issue" ]; then
    if [ "${words[2]}" = "create" ] || [ "${words[5]}" = "create" ] || \
       [ "${words[2]}" = "list" ] || [ "${words[5]}" = "list" ]; then
      case "${prev}" in
        -l | --label)
          __gh_label_completion_labels_from_repo "$(__gh_label_completion_labels_get_repo_from_words)"
          return
          ;;
      esac

    elif [ "${words[2]}" = "edit" ] || [ "${words[4]}" = "edit" ]; then
      case "${prev}" in
        --add-label)
          __gh_label_completion_labels_from_repo "$(__gh_label_completion_labels_get_repo_from_words)"
          return
          ;;
        --remove-label)
          local ISSUE=""
          if [ "${words[2]}" = "edit" ] && [ "${words[3]:1:1}" != "-" ] ; then
            ISSUE="${words[3]}"
          fi
          if [ "${words[4]}" = "edit" ] && [ "${words[5]:1:1}" != "-" ] ; then
            ISSUE="${words[5]}"
          fi
          if [ -n  "${ISSUE}" ]; then
            local ARGS=("issue" "view" "${ISSUE}")
            local REPO=""
            REPO="$(__gh_label_completion_labels_get_repo_from_words)"
            test -n "${REPO}" && ARGS=("${ARGS[@]}" "--repo" "${REPO}")
            __gh_label_completion_labels_from_target "${ARGS[@]}"
          fi
          return
          ;;
      esac
    fi

  elif [ "${words[1]}" = "pr" ]; then
    if [ "${words[2]}" = "create" ] || [ "${words[5]}" = "create" ] || \
       [ "${words[2]}" = "list" ] || [ "${words[5]}" = "list" ]; then
      case "${prev}" in
        -l | --label)
          __gh_label_completion_labels_from_repo "$(__gh_label_completion_labels_get_repo_from_words)"
          return
          ;;
      esac

    elif [ "${words[2]}" = "edit" ] || [ "${words[4]}" = "edit" ]; then
      case "${prev}" in
        --add-label)
          __gh_label_completion_labels_from_repo "$(__gh_label_completion_labels_get_repo_from_words)" 
          return
          ;;
        --remove-label)
          local PR=""
          local REPO=""
          if [ "${words[2]}" = "edit" ] && [ "${words[3]:1:1}" != "-" ] ; then
            PR="${words[3]}"
          fi
          if [ "${words[4]}" = "edit" ] && [ "${words[5]:1:1}" != "-" ] ; then
            PR="${words[5]}"
          fi
          local ARGS=("pr" "view")
          local REPO=""
          REPO="$(__gh_label_completion_labels_get_repo_from_words)"
          test -n "${REPO}" && ARGS=("${ARGS[@]}" "--repo" "${REPO}")
          test -n "${PR}" && ARGS=("${ARGS[@]}" "${PR}")
          __gh_label_completion_labels_from_target "${ARGS[@]}"
          return
          ;;
      esac
    fi
  fi
}

__gh_label_completion_start() {
  # 通常の入力補完.
  __start_gh
  # 候補がなければ label 用の補完.
  test "${#COMPREPLY[@]}" -eq 0 && __gh_label_completion
}

if [[ $(type -t compopt) = "builtin" ]]; then
  complete -o default -F __gh_label_completion_start gh
else
  complete -o default -o nospace -F __gh_label_completion_start gh
fi
###-end-gh-completion-###
